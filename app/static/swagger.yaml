swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "Used to manage interactions between customers, mechanics, and service tickets in a typical Mechanic Shop"
  version: "1.0.0"
host: "mechanic-shop-api-yq4k.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths: 

#  CUSTOMERS

  /customers/login:
    post:
      tags:
        - customers
      summary: "Login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers: 
    post: 
      tags:
        - customers
      summary: "Endpoint to create/register a new customer."
      description: "Endpoint to create a new customer in our mechanic shop system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new customer."
          required: true
          schema:
            $ref: "#/definitions/CustomerInput"
      responses:
        201:
          descriptions: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: johnd@email.com
              phone: "123-456-7890"
              password: password123
    
    get: #get all customers endpoint
      tags:
        - customers
      summary: "Returns all Customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved Customers Successfully"           
          schema:
            $ref: "#/definitions/AllCustomers"  

  /customers/{customer_id}:
    put: 
      tags:
        - customers
      summary: "Endpoint to update a customer."
      description: "Endpoint to update a customer, this is a token authenticated route, and the customer must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: customer_id
          required: true
          type: integer
          description: "ID of the customer to update"
        - in: "body"
          name: "body"
          description: "Information required to update a Customer."
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerInput"
      responses:
        200:
          descriptions: "Successfully Updated customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              phone: "123-456-7890"
              email: dohnj@email.com
              password: password123 

    delete:
      tags:
        - customers
      summary: "Endpoint to delete a customer"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
       - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted customer"           
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "successfully deleted customer <customer_id>."

# MECHANICS
  /mechanics/login:
    post:
      tags:
        - mechanics
      summary: "Login endpoint, (generates token)"
      description: "Validates mechanic credentials, generates and return a mechanic specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /mechanics: 
    post: 
      tags:
        - mechanics
      summary: "Endpoint to create/register a new mechanic."
      description: "Endpoint to create a new mechanic in our mechanic shop system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new mechanic."
          required: true
          schema:
            $ref: "#/definitions/MechanicInput"
      responses:
        201:
          descriptions: "Successful Mechanic Creation"
          schema:
            $ref: "#/definitions/MechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: johnd@email.com
              phone: "123-456-7890"
              salary: 30.000
              password: password123
          
    get: #get all mechanics endpoint
      tags:
        - mechanics
      summary: "Returns all Mechanics"
      description: "Endpoint to retrieve a list of all mechanics."
      responses:
        200:
          description: "Retrieved Mechanics Successfully"           
          schema:
            $ref: "#/definitions/AllMechanics" 
          
    put: 
      tags:
        - mechanics
      summary: "Endpoint to update a mechanic."
      description: "Endpoint to update a mechanic, this is a token authenticated route, and the mechanic must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Mechanic."
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicInput"
      responses:
        200:
          descriptions: "Successfully Updated mechanic"
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              phone: "123-456-7890"
              email: dohnj@email.com
              salary: 30000
              password: password123 

    delete:
      tags:
        - mechanics
      summary: "Endpoint to delete a mechanic"
      description: "Endpoint to delete a mechanic. Requires token authentication, mechanic must be logged in to delete their account"
      security:
       - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted mechanic"           
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"
          examples:
            application/json:
              message: "successfully deleted mechanic <mechanic_id>."
              
  /mechanics/my-tickets:
    get: #get all mechanics tickets endpoint
      tags:
        - mechanics
      summary: "Returns all tickets for a mechanic"
      description: "Endpoint to retrieve a list of all tickets for a mechanic."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Retrieved Tickets Successfully"           
          schema:
            $ref: "#/definitions/TicketResponse" 

# SERVICE TICKETS

  /service_tickets: 
    post: 
      tags:
        - service tickets
      summary: "Endpoint to create a new service ticket."
      description: "Endpoint to create a new service ticket for the mechanic shop."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new ticket."
          required: true
          schema:
            $ref: "#/definitions/TicketInput"
      responses:
        201:
          descriptions: "Successful Service Ticket Creation"
          schema:
            $ref: "#/definitions/TicketResponse"
          examples:
            application/json:
              id: 1
              VIN: 1HGCM82633A123456
              service_date: 1/1/2025
              service_desc: Oil change
              customer_id: 1

    get: #get all tickets endpoint
        tags:
          - service tickets
        summary: "Returns all tickets"
        description: "Endpoint to retrieve a list of all service tickets."
        responses:
          200:
            description: "Retrieved Service Tickets Successfully"           
            schema:
              $ref: "#/definitions/AllTickets" 

  /service_tickets/add_mechanic:
    put:
      tags:
        - service tickets
      summary: "Assign a mechanic to a service ticket"
      description: "Requires Ticket ID and Mechanic ID"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/TicketMechanicInput"
      responses:
        200:
          description: "Mechanic assigned successfully"
          schema:
            $ref: "#/definitions/TicketMechanicResponse"

  /service_tickets/remove_mechanic:
    put:
      tags:
        - service tickets
      summary: "Remove a mechanic from a service ticket"
      description: "Requires Ticket ID and Mechanic ID"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/TicketMechanicInput"
      responses:
        200:
          description: "Mechanic removed successfully"
          schema:
            $ref: "#/definitions/TicketMechanicResponse"

  /service_tickets/{ticket_id}/parts:
    post:
      tags:
        - service tickets
      summary: "Assign a part to a service ticket"
      description: "Links an existing part description to a ticket by creating a part record."
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PartInput"
      responses:
        201:
          description: "Part successfully assigned to service ticket"
          schema:
            $ref: "#/definitions/PartResponse"

#  PART DESCRIPTIONS

  /part_descriptions:
    post:
      tags:
        - parts
      summary: "Create a new part description"
      description: "Adds a new part description to the system."
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PartDescriptionInput"
      responses:
        201:
          description: "Part description created successfully"
          schema:
            $ref: "#/definitions/PartDescriptionResponse"

    get:
      tags:
        - parts
      summary: "Retrieve all part descriptions"
      description: "Returns a list of all part descriptions."
      responses:
        200:
          description: "Successfully retrieved part descriptions"
          schema:
            $ref: "#/definitions/AllPartDescriptions"

  /part_descriptions/{description_id}:
    put:
      tags:
        - parts
      summary: "Update a part description"
      description: "Updates an existing part description."
      parameters:
        - in: "path"
          name: "description_id"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PartDescriptionInput"
      responses:
        200:
          description: "Part description updated successfully"
          schema:
            $ref: "#/definitions/PartDescriptionResponse"

    delete:
      tags:
        - parts
      summary: "Delete a part description"
      description: "Deletes a part description from the system."
      parameters:
        - in: "path"
          name: "description_id"
          required: true
          type: "integer"
      responses:
        200:
          description: "Part description deleted successfully"
          schema:
            $ref: "#/definitions/DeletePartResponse"

# PARTS

  /parts:
    post:
      tags:
        - parts
      summary: "Create a new part"
      description: "Adds a new part to the inventory, must reference a part description."
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PartInput"
      responses:
        201:
          description: "Part created successfully"
          schema:
            $ref: "#/definitions/PartResponse"

    get:
      tags:
        - parts
      summary: "Retrieve all parts"
      description: "Returns a list of all parts in inventory."
      responses:
        200:
          description: "Successfully retrieved parts"
          schema:
            $ref: "#/definitions/AllParts"

definitions: 

  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      
    required:
      - email
      - password
    
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CustomerInput:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password

  CustomerResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"

  MechanicInput:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "float"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - salary
      - password

  MechanicResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary: 
        type: "float"
      password:
        type: "string"

  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "float"
        password:
          type: "string"

  TicketInput:
    type: "object"
    properties:
      VIN:
        type: "string"
      service_date:
        type: "string"
      service_desc:
        type: "string"
      customer_id:
        type: "string"
      
    required:
      - VIN
      - service_date
      - service_desc
      - customer_id

  TicketResponse:
    type: "object"
    properties:
      id:
        type: "int"
      VIN:
        type: "string"
      service_date:
        type: "string"
      service_desc:
        type: "string"
      customer_id: 
        type: "int"

  AllTickets:
      type: "array"
      items:
        type: "object"
        properties:
          VIN:
            type: "string"
          service_date:
            type: "string"
          service_desc:
            type: "string"
          customer_id:
            type: "string"

  TicketMechanicInput:
    type: "object"
    properties:
      ticket_id:
        type: "integer"
      mechanic_id:
        type: "integer"
    required:
      - ticket_id
      - mechanic_id

  TicketMechanicResponse:
    type: "object"
    properties:
      message:
        type: "string"
      ticket_id:
        type: "integer"
      mechanic_id:
        type: "integer"

  PartDescriptionInput:
    type: "object"
    properties:
      description:
        type: "string"
    required:
      - description

  PartDescriptionResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      description:
        type: "string"

  AllPartDescriptions:
    type: array
    items:
      $ref: "#/definitions/PartDescriptionResponse"

  PartInput:
    type: "object"
    properties:
      part_description_id:
        type: "integer"
      ticket_id:
        type: "integer"
    required:
      - part_description_id
      - ticket_id

  PartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      part_description_id:
        type: "integer"
      ticket_id:
        type: "integer"
    
  AllParts:
  type: array
  items:
    $ref: "#/definitions/PartResponse"

  DeletePartResponse:
    type: object
    properties:
      message:
        type: string
  